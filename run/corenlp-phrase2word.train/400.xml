<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="CoreNLP-to-HTML.xsl" type="text/xsl"?>
<root>
  <document>
    <sentences>
      <sentence id="1">
        <tokens>
          <token id="1">
            <word>an</word>
            <lemma>a</lemma>
            <CharacterOffsetBegin>0</CharacterOffsetBegin>
            <CharacterOffsetEnd>2</CharacterOffsetEnd>
            <POS>DT</POS>
          </token>
          <token id="2">
            <word>algorithm</word>
            <lemma>algorithm</lemma>
            <CharacterOffsetBegin>3</CharacterOffsetBegin>
            <CharacterOffsetEnd>12</CharacterOffsetEnd>
            <POS>NN</POS>
          </token>
          <token id="3">
            <word>for</word>
            <lemma>for</lemma>
            <CharacterOffsetBegin>13</CharacterOffsetBegin>
            <CharacterOffsetEnd>16</CharacterOffsetEnd>
            <POS>IN</POS>
          </token>
          <token id="4">
            <word>performing</word>
            <lemma>perform</lemma>
            <CharacterOffsetBegin>17</CharacterOffsetBegin>
            <CharacterOffsetEnd>27</CharacterOffsetEnd>
            <POS>VBG</POS>
          </token>
          <token id="5">
            <word>encryption</word>
            <lemma>encryption</lemma>
            <CharacterOffsetBegin>28</CharacterOffsetBegin>
            <CharacterOffsetEnd>38</CharacterOffsetEnd>
            <POS>NN</POS>
          </token>
          <token id="6">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>39</CharacterOffsetBegin>
            <CharacterOffsetEnd>42</CharacterOffsetEnd>
            <POS>CC</POS>
          </token>
          <token id="7">
            <word>decryption</word>
            <lemma>decryption</lemma>
            <CharacterOffsetBegin>43</CharacterOffsetBegin>
            <CharacterOffsetEnd>53</CharacterOffsetEnd>
            <POS>NN</POS>
          </token>
          <token id="8">
            <word>-</word>
            <lemma>-</lemma>
            <CharacterOffsetBegin>54</CharacterOffsetBegin>
            <CharacterOffsetEnd>55</CharacterOffsetEnd>
            <POS>:</POS>
          </token>
          <token id="9">
            <word>a</word>
            <lemma>a</lemma>
            <CharacterOffsetBegin>56</CharacterOffsetBegin>
            <CharacterOffsetEnd>57</CharacterOffsetEnd>
            <POS>DT</POS>
          </token>
          <token id="10">
            <word>series</word>
            <lemma>series</lemma>
            <CharacterOffsetBegin>58</CharacterOffsetBegin>
            <CharacterOffsetEnd>64</CharacterOffsetEnd>
            <POS>NN</POS>
          </token>
          <token id="11">
            <word>of</word>
            <lemma>of</lemma>
            <CharacterOffsetBegin>65</CharacterOffsetBegin>
            <CharacterOffsetEnd>67</CharacterOffsetEnd>
            <POS>IN</POS>
          </token>
          <token id="12">
            <word>well-defined</word>
            <lemma>well-defined</lemma>
            <CharacterOffsetBegin>68</CharacterOffsetBegin>
            <CharacterOffsetEnd>80</CharacterOffsetEnd>
            <POS>JJ</POS>
          </token>
          <token id="13">
            <word>steps</word>
            <lemma>step</lemma>
            <CharacterOffsetBegin>81</CharacterOffsetBegin>
            <CharacterOffsetEnd>86</CharacterOffsetEnd>
            <POS>NNS</POS>
          </token>
          <token id="14">
            <word>that</word>
            <lemma>that</lemma>
            <CharacterOffsetBegin>87</CharacterOffsetBegin>
            <CharacterOffsetEnd>91</CharacterOffsetEnd>
            <POS>WDT</POS>
          </token>
          <token id="15">
            <word>can</word>
            <lemma>can</lemma>
            <CharacterOffsetBegin>92</CharacterOffsetBegin>
            <CharacterOffsetEnd>95</CharacterOffsetEnd>
            <POS>MD</POS>
          </token>
          <token id="16">
            <word>be</word>
            <lemma>be</lemma>
            <CharacterOffsetBegin>96</CharacterOffsetBegin>
            <CharacterOffsetEnd>98</CharacterOffsetEnd>
            <POS>VB</POS>
          </token>
          <token id="17">
            <word>followed</word>
            <lemma>follow</lemma>
            <CharacterOffsetBegin>99</CharacterOffsetBegin>
            <CharacterOffsetEnd>107</CharacterOffsetEnd>
            <POS>VBN</POS>
          </token>
          <token id="18">
            <word>as</word>
            <lemma>as</lemma>
            <CharacterOffsetBegin>108</CharacterOffsetBegin>
            <CharacterOffsetEnd>110</CharacterOffsetEnd>
            <POS>IN</POS>
          </token>
          <token id="19">
            <word>a</word>
            <lemma>a</lemma>
            <CharacterOffsetBegin>111</CharacterOffsetBegin>
            <CharacterOffsetEnd>112</CharacterOffsetEnd>
            <POS>DT</POS>
          </token>
          <token id="20">
            <word>procedure</word>
            <lemma>procedure</lemma>
            <CharacterOffsetBegin>113</CharacterOffsetBegin>
            <CharacterOffsetEnd>122</CharacterOffsetEnd>
            <POS>NN</POS>
          </token>
          <token id="21">
            <word>cipher</word>
            <lemma>cipher</lemma>
            <CharacterOffsetBegin>123</CharacterOffsetBegin>
            <CharacterOffsetEnd>129</CharacterOffsetEnd>
            <POS>NN</POS>
          </token>
        </tokens>
        <parse>(ROOT (FRAG (NP (DT an) (NN algorithm)) (PP (IN for) (S (VP (VBG performing) (NP (NP (NN encryption) (CC and) (NN decryption)) (: -) (NP (NP (DT a) (NN series)) (PP (IN of) (NP (JJ well-defined) (NNS steps))) (SBAR (WHNP (WDT that)) (S (VP (MD can) (VP (VB be) (VP (VBN followed) (PP (IN as) (NP (DT a) (NN procedure) (NN cipher))))))))))))))) </parse>
        <dependencies type="basic-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="2">algorithm</dependent>
          </dep>
          <dep type="det">
            <governor idx="2">algorithm</governor>
            <dependent idx="1">an</dependent>
          </dep>
          <dep type="prep">
            <governor idx="2">algorithm</governor>
            <dependent idx="3">for</dependent>
          </dep>
          <dep type="pcomp">
            <governor idx="3">for</governor>
            <dependent idx="4">performing</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="4">performing</governor>
            <dependent idx="5">encryption</dependent>
          </dep>
          <dep type="cc">
            <governor idx="5">encryption</governor>
            <dependent idx="6">and</dependent>
          </dep>
          <dep type="conj">
            <governor idx="5">encryption</governor>
            <dependent idx="7">decryption</dependent>
          </dep>
          <dep type="det">
            <governor idx="10">series</governor>
            <dependent idx="9">a</dependent>
          </dep>
          <dep type="dep">
            <governor idx="5">encryption</governor>
            <dependent idx="10">series</dependent>
          </dep>
          <dep type="prep">
            <governor idx="10">series</governor>
            <dependent idx="11">of</dependent>
          </dep>
          <dep type="amod">
            <governor idx="13">steps</governor>
            <dependent idx="12">well-defined</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="11">of</governor>
            <dependent idx="13">steps</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="17">followed</governor>
            <dependent idx="14">that</dependent>
          </dep>
          <dep type="aux">
            <governor idx="17">followed</governor>
            <dependent idx="15">can</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="17">followed</governor>
            <dependent idx="16">be</dependent>
          </dep>
          <dep type="rcmod">
            <governor idx="10">series</governor>
            <dependent idx="17">followed</dependent>
          </dep>
          <dep type="prep">
            <governor idx="17">followed</governor>
            <dependent idx="18">as</dependent>
          </dep>
          <dep type="det">
            <governor idx="21">cipher</governor>
            <dependent idx="19">a</dependent>
          </dep>
          <dep type="nn">
            <governor idx="21">cipher</governor>
            <dependent idx="20">procedure</dependent>
          </dep>
          <dep type="pobj">
            <governor idx="18">as</governor>
            <dependent idx="21">cipher</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="2">algorithm</dependent>
          </dep>
          <dep type="det">
            <governor idx="2">algorithm</governor>
            <dependent idx="1">an</dependent>
          </dep>
          <dep type="prepc_for">
            <governor idx="2">algorithm</governor>
            <dependent idx="4">performing</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="4">performing</governor>
            <dependent idx="5">encryption</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="5">encryption</governor>
            <dependent idx="7">decryption</dependent>
          </dep>
          <dep type="det">
            <governor idx="10">series</governor>
            <dependent idx="9">a</dependent>
          </dep>
          <dep type="dep">
            <governor idx="5">encryption</governor>
            <dependent idx="10">series</dependent>
          </dep>
          <dep type="amod">
            <governor idx="13">steps</governor>
            <dependent idx="12">well-defined</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="10">series</governor>
            <dependent idx="13">steps</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="17">followed</governor>
            <dependent idx="14">that</dependent>
          </dep>
          <dep type="aux">
            <governor idx="17">followed</governor>
            <dependent idx="15">can</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="17">followed</governor>
            <dependent idx="16">be</dependent>
          </dep>
          <dep type="rcmod">
            <governor idx="10">series</governor>
            <dependent idx="17">followed</dependent>
          </dep>
          <dep type="det">
            <governor idx="21">cipher</governor>
            <dependent idx="19">a</dependent>
          </dep>
          <dep type="nn">
            <governor idx="21">cipher</governor>
            <dependent idx="20">procedure</dependent>
          </dep>
          <dep type="prep_as">
            <governor idx="17">followed</governor>
            <dependent idx="21">cipher</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-ccprocessed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="2">algorithm</dependent>
          </dep>
          <dep type="det">
            <governor idx="2">algorithm</governor>
            <dependent idx="1">an</dependent>
          </dep>
          <dep type="prepc_for">
            <governor idx="2">algorithm</governor>
            <dependent idx="4">performing</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="4">performing</governor>
            <dependent idx="5">encryption</dependent>
          </dep>
          <dep type="dobj">
            <governor idx="4">performing</governor>
            <dependent idx="7">decryption</dependent>
          </dep>
          <dep type="conj_and">
            <governor idx="5">encryption</governor>
            <dependent idx="7">decryption</dependent>
          </dep>
          <dep type="det">
            <governor idx="10">series</governor>
            <dependent idx="9">a</dependent>
          </dep>
          <dep type="dep">
            <governor idx="5">encryption</governor>
            <dependent idx="10">series</dependent>
          </dep>
          <dep type="amod">
            <governor idx="13">steps</governor>
            <dependent idx="12">well-defined</dependent>
          </dep>
          <dep type="prep_of">
            <governor idx="10">series</governor>
            <dependent idx="13">steps</dependent>
          </dep>
          <dep type="nsubjpass">
            <governor idx="17">followed</governor>
            <dependent idx="14">that</dependent>
          </dep>
          <dep type="aux">
            <governor idx="17">followed</governor>
            <dependent idx="15">can</dependent>
          </dep>
          <dep type="auxpass">
            <governor idx="17">followed</governor>
            <dependent idx="16">be</dependent>
          </dep>
          <dep type="rcmod">
            <governor idx="10">series</governor>
            <dependent idx="17">followed</dependent>
          </dep>
          <dep type="det">
            <governor idx="21">cipher</governor>
            <dependent idx="19">a</dependent>
          </dep>
          <dep type="nn">
            <governor idx="21">cipher</governor>
            <dependent idx="20">procedure</dependent>
          </dep>
          <dep type="prep_as">
            <governor idx="17">followed</governor>
            <dependent idx="21">cipher</dependent>
          </dep>
        </dependencies>
      </sentence>
    </sentences>
  </document>
</root>
